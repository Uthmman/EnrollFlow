
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    match /registrations/{registrationId} {
      // Allow authenticated users to create new registrations
      allow create: if request.auth != null;

      // Allow users whose email matches YOUR_ADMIN_EMAIL_HERE to read ALL registrations
      // Also, allow authenticated users to read their OWN registrations
      allow read: if request.auth != null && (request.auth.token.email == "YOUR_ADMIN_EMAIL_HERE" || request.auth.uid == resource.data.firebaseUserId);

      // For now, explicitly deny update and delete for registrations.
      // These can be refined later for admin-specific actions if needed.
      allow update, delete: if false;
    }

    match /programs/{programId} {
      // Allow anyone to read program data
      allow read: if true;
      // Allow writes for development/seeding by anyone, and by admin.
      // For production, you might want to restrict the 'true' part or make it admin-only.
      allow write: if true; // Simpler for client-side seeding during development
                            // For production: request.auth != null && request.auth.token.email == "YOUR_ADMIN_EMAIL_HERE";
    }

    match /paymentMethods/{methodId} {
      // Allow anyone to read payment methods
      allow read: if true;
      // Allow writes for development/seeding by anyone, and by admin.
      // For production, you might want to restrict the 'true' part or make it admin-only.
      allow write: if true; // Simpler for client-side seeding during development
                            // For production: request.auth != null && request.auth.token.email == "YOUR_ADMIN_EMAIL_HERE";
    }
  }
}

    